# handlers.py

import logging
import asyncio
from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
import aiohttp

from bot import dp, bot
from config import OPENROUTER_API_KEY, REPLICATE_API_TOKEN, TEXT_MODEL, IMAGE_GEN_MODEL, INPAINTING_MODEL

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ==========
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")],
        [KeyboardButton(text="‚úÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# ========== –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ==========
class UserState(StatesGroup):
    waiting_for_text_prompt = State()
    waiting_for_image_prompt = State()
    waiting_for_image_upload = State()
    waiting_for_edit_prompt = State()

# ========== –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ ==========
user_histories = {}  # {user_id: [{"role": "user", "content": ...}, ...]}

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@dp.message(F.text == "üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
async def ask_new_question(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(UserState.waiting_for_text_prompt)

@dp.message(F.text == "üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
async def ask_image_prompt(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏, –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç—ã —Ö–æ—á–µ—à—å:")
    await state.set_state(UserState.waiting_for_image_prompt)

@dp.message(F.text == "‚úÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def ask_for_image_upload(message: Message, state: FSMContext):
    await message.answer("–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(UserState.waiting_for_image_upload)

# ========== –î–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ==========
@dp.message(UserState.waiting_for_text_prompt)
async def handle_text_query(message: Message, state: FSMContext):
    user_query = message.text
    user_id = message.from_user.id

    if user_id not in user_histories:
        user_histories[user_id] = []

    user_histories[user_id].append({"role": "user", "content": user_query})
    history = user_histories[user_id]

    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }

            data = {
                "model": TEXT_MODEL,
                "messages": history
            }

            async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data) as resp:
                if resp.status != 200:
                    logger.error(f"OpenRouter error: {resp.status}")
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
                    return

                result = await resp.json()
                answer = result["choices"][0]["message"]["content"]
                user_histories[user_id].append({"role": "assistant", "content": answer})

                await message.answer(answer)

        await state.set_state(UserState.waiting_for_text_prompt)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ==========
@dp.message(UserState.waiting_for_image_prompt)
async def handle_image_query(message: Message, state: FSMContext):
    image_prompt = message.text
    await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    headers = {
        "Authorization": f"Token {REPLICATE_API_TOKEN}",
        "Content-Type": "application/json",
    }

    payload = {
        "version": IMAGE_GEN_MODEL,
        "input": {"prompt": image_prompt}
    }

    async with aiohttp
    () as session:
        async with session.post("https://api.replicate.com/v1/predictions", headers=headers, json=payload) as resp:
            if resp.status != 201:
                logger.error(f"Replicate image gen error: {resp.status}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return

            prediction = await resp.json()
            prediction_id = prediction["id"]

            while True:
                await asyncio.sleep(2)
                status_url = f"https://api.replicate.com/v1/predictions/{prediction_id}"
                async with session.get(status_url, headers=headers) as status_resp:
                    status_data = await status_resp.json()
                    if status_data["status"] == "succeeded":
                        image_url = status_data["output"][0]
                        await message.answer_photo(photo=image_url)
                        break
                    elif status_data["status"] == "failed":
                        logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                        break

    await state.clear()

# ========== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ==========
@dp.message(UserState.waiting_for_image_upload, F.photo)
async def handle_image_upload(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

    await state.update_data(image_url=file_url)
    await message.answer("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:")
    await state.set_state(UserState.waiting_for_edit_prompt)

@dp.message(UserState.waiting_for_edit_prompt)
async def handle_edit_prompt(message: Message, state: FSMContext):
    edit_prompt = message.text
    data = await state.get_data()
    image_url = data["image_url"]

    await message.answer("üñåÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    headers = {
        "Authorization": f"Token {REPLICATE_API_TOKEN}",
        "Content-Type": "application/json",
    }

    payload = {
        "version": INPAINTING_MODEL,
        "input": {
            "image": image_url,
            "prompt": edit_prompt
        }
    }

    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.replicate.com/v1/predictions", headers=headers, json=payload) as resp:
            if resp.status != 201:
                logger.error(f"Replicate inpainting error: {resp.status}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return

            prediction = await resp.json()
            prediction_id = prediction["id"]

            while True:
                await asyncio.sleep(2)
                status_url = f"https://api.replicate.com/v1/predictions/{prediction_id}"
                async with session.get(status_url, headers=headers) as status_resp:
                    status_data = await status_resp.json()
                    if status_data["status"] == "succeeded":
                        edited_image_url = status_data["output"]
                        await message.answer_photo(photo=edited_image_url)
                        break
                    elif status_data["status"] == "failed":
                        logger.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                        break

    await state.clear()

# ========== –ö–æ–º–∞–Ω–¥–∞ /start ==========
@dp.message(F.text | F.command)
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard).ClientSession